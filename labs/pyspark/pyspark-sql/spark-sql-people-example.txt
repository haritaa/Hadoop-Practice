val path = "file:///home/ubuntu/danskeit_hadoop-pyspark/labs/dataset/spark/people.json"

val sqlContext = new org.apache.spark.sql.SQLContext(sc)
val df = sqlContext.read.json("file:///home/ubuntu/spark/people.json")

df.show()
df.printSchema()

df.select("name").show()

df.select(df("name"), df("age") + 1).show()
df.filter(df("age") > 21).show()
df.groupBy("age").count().show()

df.registerTempTable("people")

val teenagers = sqlContext.sql("SELECT name, age FROM people WHERE age >= 13 AND age <= 19")
teenagers.show()	// Displays records
teenagers.count()	// Displays count

teenagers.collect()	// Collects data from Dataframe to Array
teenagers.collect().foreach(println)	// Prints data available in the Dataframe

#Write data in parquet format to hdfs
teenagers.select("name", "age").write.format("parquet").save("/home/ubuntu/spark/parquet")

#Write data in parquet format to local file system
//teenagers.select("name", "age").write.format("parquet").save("file:///home/ubuntu/spark/teenagers.parquet")

#Read the data in parquet from hdfs
val newDf = sqlContext.read.format("parquet").load("/home/ubuntu/spark/parquet")

#Print details
newDf.show()

#Write data in orc format to hdfs 
newDf.select("name", "age").write.format("orc").save("/home/ubuntu/spark/orc/teenagers.orc")

#Start Spark Shell with Avro dependency
spark-shell --packages org.apache.spark:spark-avro_2.12:3.0.1

#Write data in avro format
newDf.select("name", "age").write.format("avro").save("/home/ubuntu/spark/avro/teenagers.avro")

#Write data in avro format
sqlContext.read.format("avro").load("/home/ubuntu/spark/avro/teenagers.avro")